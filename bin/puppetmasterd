#!/usr/bin/env ruby

#
# = Synopsis
#
# The central puppet server.  Functions as a certificate authority by default.
#
# = Usage
#
#   puppetmasterd [-D|--daemonize|--no-daemonize] [-d|--debug] [-h|--help]
#       [-l|--logdest <file>|console|syslog] [-v|--verbose] [-V|--version]
#
# = Description
#
# This is the puppet central daemon.
#
# = Options
#
# Note that any configuration parameter that's valid in the configuration file
# is also a valid long argument.  For example, 'ssldir' is a valid configuration
# parameter, so you can specify '--ssldir <directory>' as an argument.
#
# See the configuration file documentation at
# http://reductivelabs.com/trac/puppet/wiki/ConfigurationReference for
# the full list of acceptable parameters. A commented list of all
# configuration options can also be generated by running puppetmasterdd with
# '--genconfig'.
#
# daemonize::
#   Send the process into the background.  This is the default.
#
# no-daemonize::
#   Do not send the process into the background.
#
# debug::
#   Enable full debugging.
#
# help::
#   Print this help message.
#
# logdest::
#   Where to send messages.  Choose between syslog, the console, and a log file.
#   Defaults to sending messages to syslog, or the console
#   if debugging or verbosity is enabled.
#
# verbose::
#   Enable verbosity.
#
# version::
#   Print the puppet version number and exit.
#
# = Example
#
#   puppetmasterd
#
# = Author
#
# Luke Kanies
#
# = Copyright
#
# Copyright (c) 2005 Reductive Labs, LLC
# Licensed under the GNU Public License

# Do an initial trap, so that cancels don't get a stack trace.
trap(:INT) do
    $stderr.puts "Cancelling startup"
    exit(0)
end

require 'getoptlong'
require 'puppet'
require 'puppet/network/server'

options = [
	[ "--debug",	"-d",			GetoptLong::NO_ARGUMENT ],
	[ "--help",		"-h",			GetoptLong::NO_ARGUMENT ],
	[ "--logdest",	"-l",			GetoptLong::REQUIRED_ARGUMENT ],
	[ "--verbose",	"-v",			GetoptLong::NO_ARGUMENT ],
    [ "--version",  "-V",           GetoptLong::NO_ARGUMENT ]
]

# Add all of the config parameters as valid options.
Puppet.settings.addargs(options)

result = GetoptLong.new(*options)

options = {
    :setdest => false,
    :verbose => false,
    :debug => false
}

begin
    result.each { |opt,arg|
        case opt
            # First check to see if the argument is a valid configuration parameter;
            # if so, set it. NOTE: there is a catch-all at the bottom for defaults.rb
            when "--debug"
                options[:debug] = true
            when "--help"
                if Puppet.features.usage?
                    RDoc::usage && exit
                else
                    puts "No help available unless you have RDoc::usage installed"
                    exit
                end
            when "--logdest"
                begin
                    Puppet::Util::Log.newdestination(arg)
                    options[:setdest] = true
                rescue => detail
                    if Puppet[:debug]
                        puts detail.backtrace
                    end
                    $stderr.puts detail.to_s
                end
            when "--version"
                puts "%s" % Puppet.version
                exit
            when "--verbose"
                options[:verbose] = true
            else
                Puppet.settings.handlearg(opt, arg)
        end
    }
rescue GetoptLong::InvalidOption => detail
    $stderr.puts "Try '#{$0} --help'"
    #$stderr.puts detail
    exit(1)
end

# Now parse the config
Puppet.parse_config

# Handle the logging settings.
if options[:debug] or options[:verbose]
    if options[:debug]
        Puppet::Util::Log.level = :debug
    else
        Puppet::Util::Log.level = :info
    end

    unless Puppet[:daemonize]
        Puppet::Util::Log.newdestination(:console)
        options[:setdest] = true
    end
end

unless options[:setdest]
    Puppet::Util::Log.newdestination(:syslog)
end

Puppet.genconfig
Puppet.genmanifest

# A temporary solution, to at least make the master work for now.
Puppet::Node::Facts.terminus_class = :yaml

# Cache our nodes in yaml.  Currently not configurable.
Puppet::Node.cache_class = :yaml

# Configure all of the SSL stuff.
if Puppet::SSL::CertificateAuthority.ca?
    Puppet::SSL::Host.ca_location = :local
    Puppet.settings.use :main, :ssl, :ca
    Puppet::SSL::CertificateAuthority.instance
else
    Puppet::SSL::Host.ca_location = :none
end

require 'etc'

if Puppet[:parseonly]
    begin
        Puppet::Parser::Interpreter.new.parser(Puppet[:environment])
    rescue => detail
        Puppet.err detail
        exit 1
    end
    exit(0)
end

require 'puppet/file_serving/content'
require 'puppet/file_serving/metadata'
require 'puppet/checksum'

xmlrpc_handlers = [:Status, :FileServer, :Master, :Report, :Filebucket]
rest_handlers = [:file_content, :file_metadata, :certificate, :facts, :catalog, :report, :checksum]

if Puppet[:ca]
    xmlrpc_handlers << :CA
end

server = Puppet::Network::Server.new(:handlers => rest_handlers, :xmlrpc_handlers => xmlrpc_handlers)

if Process.uid == 0
    begin
        Puppet::Util.chuser
    rescue => detail
        puts detail.backtrace if Puppet[:trace]
        $stderr.puts "Could not change user to %s: %s" % [Puppet[:user], detail]
        exit(39)
    end
end

# Tell Puppet to manage this service for us, which has it starting and stopping
# as appropriate.
Puppet.newservice(server)

Puppet.settraps

if Puppet[:daemonize]
    server.daemonize
end

Puppet.notice "Starting Puppet server version %s" % [Puppet.version]

Puppet.start
